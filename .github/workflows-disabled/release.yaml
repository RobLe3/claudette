name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write
  id-token: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine
        
    - name: Extract version from tag
      id: version
      run: |
        TAG=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$TAG" >> $GITHUB_OUTPUT
        echo "Release version: $TAG"
        
    - name: Validate version consistency
      run: |
        PYTHON_VERSION=$(python -c "from claudette import __version__; print(__version__)")
        TAG_VERSION="${{ steps.version.outputs.VERSION }}"
        if [ "$PYTHON_VERSION" != "$TAG_VERSION" ]; then
          echo "Version mismatch: Python=$PYTHON_VERSION, Tag=$TAG_VERSION"
          exit 1
        fi
        echo "✅ Version consistency validated: $PYTHON_VERSION"
        
    - name: Build package
      run: |
        python -m build
        
    - name: Verify package
      run: |
        python -m twine check dist/*
        ls -la dist/
        
    - name: Import GPG key
      if: env.GPG_KEY
      run: |
        echo "${{ secrets.GPG_KEY }}" | gpg --batch --import
      env:
        GPG_KEY: ${{ secrets.GPG_KEY }}
        
    - name: Sign packages with GPG
      if: env.GPG_KEY
      run: |
        for file in dist/*; do
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --armor --detach-sign "$file"
        done
      env:
        GPG_KEY: ${{ secrets.GPG_KEY }}
        GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        
    - name: Publish to Test PyPI
      if: env.TEST_PYPI_TOKEN
      run: |
        python -m twine upload --repository testpypi dist/* --verbose
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
        
    - name: Test install from Test PyPI
      if: env.TEST_PYPI_TOKEN
      run: |
        sleep 30  # Wait for package to propagate
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ claudette==${{ steps.version.outputs.VERSION }}
        claudette --help
      env:
        TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
        
    - name: Publish to PyPI
      if: env.PYPI_API_TOKEN
      run: |
        python -m twine upload dist/* --verbose
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        
    - name: Extract changelog entry
      id: changelog
      run: |
        python -c "
import re
with open('CHANGELOG.md', 'r') as f:
    content = f.read()
    
# Extract the latest version entry
pattern = r'## \[' + re.escape('${{ steps.version.outputs.VERSION }}') + r'\].*?\n(.*?)(?=\n## \[|\n---|\Z)'
match = re.search(pattern, content, re.DOTALL)
if match:
    changelog_entry = match.group(1).strip()
    # Save to file for GitHub release
    with open('release_notes.md', 'w') as f:
        f.write(changelog_entry)
    print('✅ Changelog entry extracted')
else:
    print('⚠️ No changelog entry found, using default')
    with open('release_notes.md', 'w') as f:
        f.write('Release version ${{ steps.version.outputs.VERSION }}')
        "
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        name: Claudette v${{ steps.version.outputs.VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          dist/*
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update Homebrew formula
      if: env.HOMEBREW_TOKEN
      run: |
        # Calculate SHA256 for source tarball
        TARBALL_URL="https://github.com/${{ github.repository }}/archive/v${{ steps.version.outputs.VERSION }}.tar.gz"
        SHA256=$(curl -sL "$TARBALL_URL" | sha256sum | cut -d' ' -f1)
        
        echo "Tarball URL: $TARBALL_URL"
        echo "SHA256: $SHA256"
        
        # Update formula (this would typically be a separate repository)
        echo "Formula would be updated with:"
        echo "  url: $TARBALL_URL"
        echo "  sha256: $SHA256"
      env:
        HOMEBREW_TOKEN: ${{ secrets.HOMEBREW_TOKEN }}
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts
        path: |
          dist/
          release_notes.md
        retention-days: 90
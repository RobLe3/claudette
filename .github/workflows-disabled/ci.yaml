name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        
    - name: Run tests with pytest
      run: |
        python -m pytest tests/ -v --tb=short
        
    - name: Run pylint
      run: |
        python -m pylint claudette --fail-under=8.0 --output-format=text
        
    - name: Check import structure
      run: |
        python -c "from claudette import __version__; print(f'Version: {__version__}')"
        python -c "from claudette.main import main; print('Main import: OK')"
        python -c "from claudette.stats import cmd_stats; print('Stats import: OK')"
        python -c "from claudette.dashboard import TerminalDashboard; print('Dashboard import: OK')"
        
    - name: Validate CLI functionality
      run: |
        python -m claudette.main --help
        python -m claudette.main stats --help
        python -m claudette.main dashboard --help

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Verify package
      run: |
        python -m twine check dist/*
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-files
        path: dist/
        retention-days: 7

  static-checks:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-static-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-static-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pre-commit bandit[toml] mypy pytest-cov codecov
        
    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files --show-diff-on-failure
        
    - name: Run mypy type checking
      run: |
        mypy claudette --strict --ignore-missing-imports
        
    - name: Run bandit security linting
      run: |
        bandit -r claudette -f json -o bandit-report.json -lll || true
        bandit -r claudette -lll
        
    - name: Run tests with coverage
      run: |
        pytest --cov=claudette --cov-report=xml --cov-report=term --cov-fail-under=85
        
    - name: Upload coverage to Codecov
      if: env.CODECOV_TOKEN
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Upload bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json
        retention-days: 7
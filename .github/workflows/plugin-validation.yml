name: 🔌 Plugin Validation Pipeline

# Specialized validation for Claudette plugins
# Validates plugin structure, API compliance, and quality

on:
  pull_request:
    paths:
      - 'plugins/**'
      - 'src/plugins/**'
  push:
    branches: [ main ]
    paths:
      - 'plugins/**'
      - 'src/plugins/**'
  workflow_dispatch:
    inputs:
      plugin_path:
        description: 'Path to plugin directory'
        required: false
        default: 'plugins/'

jobs:
  detect-plugins:
    name: 🔎 Detect Plugin Changes
    runs-on: ubuntu-latest
    outputs:
      plugins: ${{ steps.detect.outputs.plugins }}
      has-plugins: ${{ steps.detect.outputs.has-plugins }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed plugins
        id: detect
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.number }}/files | jq -r '.[].filename')
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1)
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Find plugin directories that have changes
          PLUGIN_DIRS=$(echo "$CHANGED_FILES" | grep -E '^plugins/' | cut -d'/' -f2 | sort -u || true)
          
          if [ -n "$PLUGIN_DIRS" ]; then
            echo "has-plugins=true" >> $GITHUB_OUTPUT
            # Convert to JSON array for matrix strategy
            PLUGINS_JSON=$(echo "$PLUGIN_DIRS" | jq -R -s -c 'split("\n") | map(select(. != ""))')
            echo "plugins=$PLUGINS_JSON" >> $GITHUB_OUTPUT
            echo "Detected plugin changes: $PLUGINS_JSON"
          else
            echo "has-plugins=false" >> $GITHUB_OUTPUT
            echo "plugins=[]" >> $GITHUB_OUTPUT
            echo "No plugin changes detected"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  validate-plugins:
    name: 📝 Validate Plugin
    runs-on: ubuntu-latest
    needs: detect-plugins
    if: needs.detect-plugins.outputs.has-plugins == 'true'
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.detect-plugins.outputs.plugins) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install project dependencies
        run: npm ci

      - name: Build main project
        run: npm run build

      - name: Validate plugin structure
        run: |
          PLUGIN_PATH="plugins/${{ matrix.plugin }}"
          echo "Validating plugin at: $PLUGIN_PATH"
          
          if [ ! -d "$PLUGIN_PATH" ]; then
            echo "Error: Plugin directory not found: $PLUGIN_PATH"
            exit 1
          fi
          
          # Check required files
          REQUIRED_FILES=("package.json" "src/index.ts")
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$PLUGIN_PATH/$file" ]; then
              echo "Error: Required file missing: $file"
              exit 1
            fi
          done
          
          echo "Plugin structure validation passed"

      - name: Install plugin dependencies
        run: |
          cd "plugins/${{ matrix.plugin }}"
          if [ -f "package.json" ]; then
            npm install
          fi

      - name: Validate plugin metadata
        run: |
          cd "plugins/${{ matrix.plugin }}"
          
          # Extract and validate package.json
          if ! jq empty package.json 2>/dev/null; then
            echo "Error: Invalid JSON in package.json"
            exit 1
          fi
          
          # Check required package.json fields
          REQUIRED_FIELDS=("name" "version" "description" "main")
          for field in "${REQUIRED_FIELDS[@]}"; do
            if [ "$(jq -r ".$field // empty" package.json)" = "" ]; then
              echo "Error: Missing required field in package.json: $field"
              exit 1
            fi
          done
          
          # Check Claudette-specific metadata
          if [ "$(jq -r '.claudette.category // empty' package.json)" = "" ]; then
            echo "Error: Missing claudette.category in package.json"
            exit 1
          fi
          
          echo "Plugin metadata validation passed"

      - name: TypeScript compilation check
        run: |
          cd "plugins/${{ matrix.plugin }}"
          
          if [ -f "tsconfig.json" ]; then
            echo "Compiling TypeScript..."
            npx tsc --noEmit
          else
            echo "No TypeScript configuration found"
          fi

      - name: Run plugin tests
        run: |
          cd "plugins/${{ matrix.plugin }}"
          
          if [ -d "tests" ] && [ -n "$(ls -A tests 2>/dev/null)" ]; then
            echo "Running plugin tests..."
            npm test
          else
            echo "No tests found for plugin"
          fi

      - name: Plugin API compliance check
        run: |
          echo "Checking plugin API compliance..."
          
          # Use our plugin CLI tool to validate
          if [ -f "dev/tools/plugin-cli.sh" ]; then
            ./dev/tools/plugin-cli.sh validate "plugins/${{ matrix.plugin }}"
          else
            echo "Plugin CLI tool not found, skipping detailed validation"
          fi

      - name: Security scan
        run: |
          cd "plugins/${{ matrix.plugin }}"
          
          echo "Running security scan..."
          
          # Check for obvious security issues
          if grep -r "eval(" src/ 2>/dev/null; then
            echo "Warning: Found eval() usage in plugin code"
          fi
          
          if grep -r "Function(" src/ 2>/dev/null; then
            echo "Warning: Found Function constructor usage in plugin code"
          fi
          
          # Run npm audit if package.json exists
          if [ -f "package.json" ]; then
            npm audit --audit-level high || echo "Security audit completed with warnings"
          fi

      - name: Generate plugin report
        run: |
          PLUGIN_PATH="plugins/${{ matrix.plugin }}"
          REPORT_FILE="plugin-report-${{ matrix.plugin }}.md"
          
          echo "# Plugin Validation Report: ${{ matrix.plugin }}" > $REPORT_FILE
          echo "" >> $REPORT_FILE
          echo "**Validation Date:** $(date)" >> $REPORT_FILE
          echo "**Plugin Path:** $PLUGIN_PATH" >> $REPORT_FILE
          echo "" >> $REPORT_FILE
          
          # Plugin metadata
          cd "$PLUGIN_PATH"
          NAME=$(jq -r '.name // "Unknown"' package.json)
          VERSION=$(jq -r '.version // "Unknown"' package.json)
          CATEGORY=$(jq -r '.claudette.category // "Unknown"' package.json)
          
          echo "## Plugin Information" >> ../$REPORT_FILE
          echo "- **Name:** $NAME" >> ../$REPORT_FILE
          echo "- **Version:** $VERSION" >> ../$REPORT_FILE
          echo "- **Category:** $CATEGORY" >> ../$REPORT_FILE
          echo "" >> ../$REPORT_FILE
          
          # Validation results
          echo "## Validation Results" >> ../$REPORT_FILE
          echo "- ✅ Structure validation: PASSED" >> ../$REPORT_FILE
          echo "- ✅ Metadata validation: PASSED" >> ../$REPORT_FILE
          echo "- ✅ TypeScript compilation: PASSED" >> ../$REPORT_FILE
          echo "- ✅ Security scan: COMPLETED" >> ../$REPORT_FILE
          echo "" >> ../$REPORT_FILE
          
          echo "## Next Steps" >> ../$REPORT_FILE
          echo "1. Code review by maintainers" >> ../$REPORT_FILE
          echo "2. Integration testing" >> ../$REPORT_FILE
          echo "3. Community feedback" >> ../$REPORT_FILE
          echo "" >> ../$REPORT_FILE
          
          cd ..
          cat $REPORT_FILE

      - name: Upload plugin report
        uses: actions/upload-artifact@v4
        with:
          name: plugin-report-${{ matrix.plugin }}
          path: plugin-report-${{ matrix.plugin }}.md
          retention-days: 30

  plugin-integration-test:
    name: ⚙️ Plugin Integration Test
    runs-on: ubuntu-latest
    needs: [detect-plugins, validate-plugins]
    if: needs.detect-plugins.outputs.has-plugins == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Test plugin loading
        run: |
          echo "Testing plugin loading integration..."
          
          # Create integration test script
          cat > test-plugin-integration.js << 'EOF'
          const { pluginManager } = require('./dist/plugins/index.js');
          const fs = require('fs');
          const path = require('path');
          
          async function testPluginLoading() {
            console.log('Testing plugin loading...');
            
            // Find all plugin directories
            const pluginsDir = 'plugins';
            if (!fs.existsSync(pluginsDir)) {
              console.log('No plugins directory found');
              return;
            }
            
            const plugins = fs.readdirSync(pluginsDir)
              .filter(dir => {
                const pluginPath = path.join(pluginsDir, dir);
                return fs.statSync(pluginPath).isDirectory() && 
                       fs.existsSync(path.join(pluginPath, 'package.json'));
              });
            
            console.log(`Found ${plugins.length} plugin(s):`, plugins);
            
            for (const pluginDir of plugins) {
              try {
                console.log(`Testing plugin: ${pluginDir}`);
                
                // Basic structure test
                const pluginPath = path.join(pluginsDir, pluginDir);
                const packageJson = JSON.parse(
                  fs.readFileSync(path.join(pluginPath, 'package.json'), 'utf8')
                );
                
                console.log(`- Name: ${packageJson.name}`);
                console.log(`- Category: ${packageJson.claudette?.category}`);
                console.log(`- Version: ${packageJson.version}`);
                
                // Check if plugin has been built
                const mainFile = packageJson.main || 'dist/index.js';
                const mainPath = path.join(pluginPath, mainFile);
                
                if (fs.existsSync(mainPath)) {
                  console.log(`- Main file exists: ${mainFile}`);
                } else {
                  console.log(`- Main file missing: ${mainFile}`);
                }
                
                console.log(`✅ Plugin ${pluginDir} structure validated`);
              } catch (error) {
                console.error(`❌ Plugin ${pluginDir} validation failed:`, error.message);
              }
            }
            
            console.log('Plugin integration test completed');
          }
          
          testPluginLoading().catch(console.error);
          EOF
          
          node test-plugin-integration.js

  plugin-documentation:
    name: 📚 Generate Plugin Documentation
    runs-on: ubuntu-latest
    needs: [detect-plugins, validate-plugins]
    if: needs.detect-plugins.outputs.has-plugins == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate plugin registry
        run: |
          echo "Generating plugin registry..."
          
          cat > PLUGIN_REGISTRY.md << 'EOF'
          # Claudette Plugin Registry
          
          This document lists all available Claudette plugins.
          
          ## Available Plugins
          
          EOF
          
          if [ -d "plugins" ]; then
            for plugin_dir in plugins/*/; do
              if [ -f "$plugin_dir/package.json" ]; then
                cd "$plugin_dir"
                
                NAME=$(jq -r '.name // "Unknown"' package.json)
                VERSION=$(jq -r '.version // "Unknown"' package.json)
                DESCRIPTION=$(jq -r '.description // "No description"' package.json)
                CATEGORY=$(jq -r '.claudette.category // "Unknown"' package.json)
                AUTHOR=$(jq -r '.author // "Unknown"' package.json)
                
                echo "### $NAME" >> ../../PLUGIN_REGISTRY.md
                echo "" >> ../../PLUGIN_REGISTRY.md
                echo "- **Version:** $VERSION" >> ../../PLUGIN_REGISTRY.md
                echo "- **Category:** $CATEGORY" >> ../../PLUGIN_REGISTRY.md
                echo "- **Author:** $AUTHOR" >> ../../PLUGIN_REGISTRY.md
                echo "- **Description:** $DESCRIPTION" >> ../../PLUGIN_REGISTRY.md
                echo "" >> ../../PLUGIN_REGISTRY.md
                
                cd ../..
              fi
            done
          else
            echo "No plugins directory found" >> PLUGIN_REGISTRY.md
          fi
          
          echo "" >> PLUGIN_REGISTRY.md
          echo "---" >> PLUGIN_REGISTRY.md
          echo "*Generated automatically by Claudette Plugin Validation Pipeline*" >> PLUGIN_REGISTRY.md
          
          cat PLUGIN_REGISTRY.md

      - name: Upload plugin registry
        uses: actions/upload-artifact@v4
        with:
          name: plugin-registry
          path: PLUGIN_REGISTRY.md
          retention-days: 90

  plugin-validation-summary:
    name: 📄 Plugin Validation Summary
    runs-on: ubuntu-latest
    needs: [detect-plugins, validate-plugins, plugin-integration-test, plugin-documentation]
    if: always() && needs.detect-plugins.outputs.has-plugins == 'true'
    steps:
      - name: Generate summary
        run: |
          echo "# Plugin Validation Pipeline Summary" > summary.md
          echo "" >> summary.md
          echo "**Date:** $(date)" >> summary.md
          echo "**Plugins Validated:** ${{ needs.detect-plugins.outputs.plugins }}" >> summary.md
          echo "" >> summary.md
          
          # Job status summary
          VALIDATE_STATUS="${{ needs.validate-plugins.result }}"
          INTEGRATION_STATUS="${{ needs.plugin-integration-test.result }}"
          DOCS_STATUS="${{ needs.plugin-documentation.result }}"
          
          echo "## Pipeline Results" >> summary.md
          echo "" >> summary.md
          echo "- Plugin Validation: $VALIDATE_STATUS" >> summary.md
          echo "- Integration Test: $INTEGRATION_STATUS" >> summary.md
          echo "- Documentation: $DOCS_STATUS" >> summary.md
          echo "" >> summary.md
          
          if [ "$VALIDATE_STATUS" = "success" ] && 
             [ "$INTEGRATION_STATUS" = "success" ] && 
             [ "$DOCS_STATUS" = "success" ]; then
            echo "## ✅ Overall Status: SUCCESS" >> summary.md
            echo "All plugin validations completed successfully." >> summary.md
          else
            echo "## ⚠️ Overall Status: ISSUES DETECTED" >> summary.md
            echo "Some plugin validations require attention." >> summary.md
          fi
          
          cat summary.md

      - name: Upload summary
        uses: actions/upload-artifact@v4
        with:
          name: plugin-validation-summary
          path: summary.md
          retention-days: 90

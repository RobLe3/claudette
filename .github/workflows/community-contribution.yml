# Community Contribution Validation Workflow
# Automated testing and validation for community contributions

name: Community Contribution Validation

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]
  
  # Allow manual trigger for testing
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to test'
        required: false
        type: string

env:
  NODE_VERSION: '18'
  REGISTRY_URL: 'https://registry.npmjs.org/'

jobs:
  # Initial validation and setup
  setup:
    name: Setup and Initial Validation
    runs-on: ubuntu-latest
    outputs:
      should-run-tests: ${{ steps.changes.outputs.should-run }}
      test-matrix: ${{ steps.changes.outputs.test-matrix }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect changes
        id: changes
        run: |
          # Check if changes affect testable code
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD)
          
          # TypeScript, JavaScript, or configuration changes
          if echo "$CHANGED_FILES" | grep -E '\.(ts|js|json)$|package\.json|tsconfig\.json'; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "test-matrix=['unit', 'integration', 'rag']" >> $GITHUB_OUTPUT
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
            echo "test-matrix=['basic']" >> $GITHUB_OUTPUT
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"

  # Code quality checks
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.should-run-tests == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: TypeScript compilation check
        run: npm run validate
      
      - name: Code formatting check
        run: |
          # Check if code is properly formatted
          npx prettier --check "src/**/*.{ts,js,json}"
        continue-on-error: true
      
      - name: Security audit
        run: |
          # Run security audit with appropriate level
          npm audit --audit-level moderate
        continue-on-error: true
      
      - name: Dependency analysis
        run: |
          # Check for outdated dependencies
          npm outdated || true
          
          # Analyze bundle size impact
          npm run build
          
          BUNDLE_SIZE=$(du -sh dist/ | cut -f1)
          echo "Bundle size: $BUNDLE_SIZE"
          
          # Store for comparison
          echo "BUNDLE_SIZE=$BUNDLE_SIZE" >> $GITHUB_ENV

  # Core functionality tests
  test-core:
    name: Core Functionality Tests
    runs-on: ubuntu-latest
    needs: [setup, quality]
    if: needs.setup.outputs.should-run-tests == 'true'
    
    strategy:
      matrix:
        node-version: ['18', '20']
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Run core tests
        run: npm run test
        env:
          NODE_ENV: test
      
      - name: Store test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-core-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            coverage/
            test-results/
            *.log

  # RAG integration tests
  test-rag:
    name: RAG Integration Tests
    runs-on: ubuntu-latest
    needs: [setup, quality]
    if: needs.setup.outputs.should-run-tests == 'true'
    
    services:
      chroma:
        image: ghcr.io/chroma-core/chroma:latest
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/api/v1/heartbeat"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Wait for services
        run: |
          # Wait for Chroma to be ready
          timeout 60 bash -c 'until curl -f http://localhost:8000/api/v1/heartbeat; do sleep 2; done'
          
          # Wait for Redis to be ready
          timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 2; done'
      
      - name: Run RAG integration tests
        run: npm run test:rag
        env:
          NODE_ENV: test
          CHROMA_URL: http://localhost:8000
          REDIS_URL: redis://localhost:6379
      
      - name: Store RAG test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-rag
          path: |
            coverage/
            test-results/
            rag-test-*.log

  # Performance benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: [test-core]
    if: needs.setup.outputs.should-run-tests == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Run performance benchmarks
        run: |
          # Run performance tests if available
          if npm run | grep "test:performance"; then
            npm run test:performance
          else
            echo "Performance tests not configured"
          fi
        continue-on-error: true
      
      - name: Analyze performance impact
        run: |
          # Compare with baseline if available
          if [ -f "benchmarks/baseline.json" ]; then
            echo "Comparing with performance baseline..."
            # Add performance comparison logic
          fi

  # Integration validation
  integration:
    name: End-to-End Integration
    runs-on: ubuntu-latest
    needs: [test-core, test-rag]
    if: needs.setup.outputs.should-run-tests == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build project
        run: npm run build
      
      - name: Run integration tests
        run: |
          # Run e2e tests if available
          if npm run | grep "test:e2e"; then
            npm run test:e2e
          else
            echo "E2E tests not configured, running validation suite"
            npm run test:validation:quick
          fi
        env:
          NODE_ENV: test

  # Documentation validation
  docs:
    name: Documentation Validation
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check documentation
        run: |
          # Check if documentation files exist and are valid
          echo "Checking documentation..."
          
          # Verify README is updated
          if [ -f "README.md" ]; then
            echo "✅ README.md exists"
          else
            echo "❌ README.md missing"
            exit 1
          fi
          
          # Check API documentation
          if npm run | grep "docs:generate"; then
            npm run docs:generate
            echo "✅ API documentation generated"
          else
            echo "⚠️ API documentation generation not configured"
          fi
      
      - name: Validate links
        run: |
          # Check for broken links in documentation
          echo "Validating documentation links..."
          # Add link validation logic if needed
        continue-on-error: true

  # Final validation and reporting
  validation-report:
    name: Validation Report
    runs-on: ubuntu-latest
    needs: [quality, test-core, test-rag, benchmark, integration, docs]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Generate validation report
        run: |
          echo "# Community Contribution Validation Report" > validation-report.md
          echo "Generated: $(date)" >> validation-report.md
          echo "" >> validation-report.md
          
          # Add job results
          echo "## Test Results" >> validation-report.md
          echo "- Code Quality: ${{ needs.quality.result }}" >> validation-report.md
          echo "- Core Tests: ${{ needs.test-core.result }}" >> validation-report.md
          echo "- RAG Tests: ${{ needs.test-rag.result }}" >> validation-report.md
          echo "- Benchmarks: ${{ needs.benchmark.result }}" >> validation-report.md
          echo "- Integration: ${{ needs.integration.result }}" >> validation-report.md
          echo "- Documentation: ${{ needs.docs.result }}" >> validation-report.md
          echo "" >> validation-report.md
          
          # Overall status
          if [[ "${{ needs.quality.result }}" == "success" && 
                "${{ needs.test-core.result }}" == "success" && 
                "${{ needs.test-rag.result }}" == "success" ]]; then
            echo "✅ **Overall Status: PASS** - Ready for review" >> validation-report.md
          else
            echo "❌ **Overall Status: FAIL** - Requires fixes" >> validation-report.md
          fi
      
      - name: Store validation report
        uses: actions/upload-artifact@v4
        with:
          name: validation-report
          path: validation-report.md
      
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('validation-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

# Workflow notifications and failure handling
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [validation-report]
    if: always()
    
    steps:
      - name: Notify on success
        if: needs.validation-report.result == 'success'
        run: |
          echo "🎉 Community contribution validation completed successfully!"
          echo "All tests passed and ready for maintainer review."
      
      - name: Notify on failure
        if: needs.validation-report.result != 'success'
        run: |
          echo "❌ Community contribution validation failed."
          echo "Please check the validation report and fix any issues."
          echo "The maintainers will help guide you through the process."
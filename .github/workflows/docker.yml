name: Docker Build & Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      push_to_registry:
        description: 'Push to container registry'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  packages: write
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ANEOS_PROJECT_PATH: aneos-project

jobs:
  # Build multi-platform Docker images
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Validate project structure
      run: |
        echo "=== Validating aNEOS Project Structure ==="
        if [ ! -d "${{ env.ANEOS_PROJECT_PATH }}" ]; then
          echo "ERROR: aNEOS project directory not found: ${{ env.ANEOS_PROJECT_PATH }}"
          exit 1
        fi
        
        cd "${{ env.ANEOS_PROJECT_PATH }}"
        
        # Check required files
        if [ ! -f "requirements.txt" ]; then
          echo "ERROR: requirements.txt not found"
          exit 1
        fi
        
        if [ ! -f "Dockerfile" ]; then
          echo "ERROR: Dockerfile not found"
          exit 1
        fi
        
        if [ ! -d "aneos_api" ]; then
          echo "ERROR: aneos_api directory not found"
          exit 1
        fi
        
        if [ ! -f "aneos_api/app.py" ]; then
          echo "ERROR: aneos_api/app.py not found"
          exit 1
        fi
        
        echo "✅ Project structure validation passed"
        
    - name: Set up Python for validation
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies and validate
      run: |
        cd "${{ env.ANEOS_PROJECT_PATH }}"
        echo "=== Installing Python dependencies ==="
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
        echo "=== Testing Python imports ==="
        python -c "import aneos_api; print('✅ aneos_api import successful')"
        python -c "import aneos_core; print('✅ aneos_core import successful')"
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/aneos
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and test Docker image (AMD64)
      uses: docker/build-push-action@v5
      with:
        context: ./${{ env.ANEOS_PROJECT_PATH }}
        platforms: linux/amd64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=amd64
        cache-to: type=gha,mode=max,scope=amd64
        outputs: type=docker,dest=/tmp/aneos-amd64.tar
        
    - name: Build and test Docker image (ARM64)
      uses: docker/build-push-action@v5
      with:
        context: ./${{ env.ANEOS_PROJECT_PATH }}
        platforms: linux/arm64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha,scope=arm64
        cache-to: type=gha,mode=max,scope=arm64
        outputs: type=docker,dest=/tmp/aneos-arm64.tar
        
    - name: Load and test AMD64 image
      run: |
        # Load the AMD64 image
        docker load --input /tmp/aneos-amd64.tar
        
        # Extract the image name from metadata
        IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
        echo "Testing image: $IMAGE_TAG"
        
        # Test basic functionality
        echo "=== Testing aNEOS Docker Image Functionality ==="
        
        # Test container startup
        echo "Testing container startup..."
        CONTAINER_ID=$(docker run -d --name aneos-test $IMAGE_TAG)
        
        # Wait for container initialization
        sleep 15
        
        # Check if container is running
        if docker ps | grep -q aneos-test; then
          echo "✅ Container started successfully"
        else
          echo "❌ Container failed to start"
          docker logs aneos-test
          exit 1
        fi
        
        # Test Python module imports
        echo "Testing Python module imports..."
        docker exec aneos-test python -c "import aneos_api; print('✅ aneos_api import successful')"
        docker exec aneos-test python -c "import aneos_core; print('✅ aneos_core import successful')"
        
        # Test API endpoint (if available)
        echo "Testing API health endpoint..."
        sleep 5  # Allow time for API to start
        
        # Check if API is responding (with timeout)
        if timeout 30 docker exec aneos-test python -c "
import requests
import time
for i in range(10):
    try:
        response = requests.get('http://localhost:8000/health', timeout=5)
        if response.status_code == 200:
            print('✅ API health check successful')
            break
    except:
        if i == 9:
            print('⚠️  API health check not available (may not be started yet)')
        time.sleep(3)
"; then
          echo "API test completed"
        else
          echo "⚠️  API test timeout - continuing with other tests"
        fi
        
        # Cleanup
        docker rm -f aneos-test
        
        echo "✅ Docker image tests completed successfully"
        
    - name: Push multi-platform Docker image
      if: github.event_name != 'pull_request' && (github.event_name == 'push' || github.event.inputs.push_to_registry == 'true')
      uses: docker/build-push-action@v5
      with:
        context: ./${{ env.ANEOS_PROJECT_PATH }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=gha,scope=amd64
          type=gha,scope=arm64
        cache-to: type=gha,mode=max

  # Security scanning for Docker images
  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build image for scanning
      run: |
        cd "${{ env.ANEOS_PROJECT_PATH }}"
        docker build -t aneos:security-scan .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'aneos:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '${{ env.ANEOS_PROJECT_PATH }}'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
        severity: 'CRITICAL,HIGH'
        
    - name: Upload Trivy image scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy-image-scan'
        
    - name: Upload Trivy filesystem scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-fs-results.sarif'
        category: 'trivy-filesystem-scan'
        
    - name: Run Docker Bench for Security
      run: |
        # Run Docker Bench Security with proper error handling
        docker run --rm --net host --pid host --userns host --cap-add audit_control \
            -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
            -v /etc:/etc:ro \
            -v /usr/bin/containerd:/usr/bin/containerd:ro \
            -v /usr/bin/runc:/usr/bin/runc:ro \
            -v /usr/lib/systemd:/usr/lib/systemd:ro \
            -v /var/lib:/var/lib:ro \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            --label docker_bench_security \
            docker/docker-bench-security > docker-bench-results.txt 2>&1 || true
            
        echo "=== Docker Bench Security Results (Summary) ==="
        if [ -f docker-bench-results.txt ]; then
          head -50 docker-bench-results.txt
        else
          echo "Docker Bench results file not found"
        fi
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: aneos-docker-security-scan-results
        path: |
          trivy-results.sarif
          trivy-fs-results.sarif
          docker-bench-results.txt
        retention-days: 30
        if-no-files-found: warn

  # Integration testing with Docker Compose
  docker-integration-test:
    name: Docker Integration Test
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build test environment
      run: |
        cd "${{ env.ANEOS_PROJECT_PATH }}"
        
        # Create test data directories
        mkdir -p data logs neo_data exports
        
        # Build the image
        docker build -t aneos:integration-test .
        
    - name: Run integration tests
      run: |
        echo "=== aNEOS Docker Integration Tests ==="
        
        # Test 1: Container startup and health
        echo "Testing container startup..."
        CONTAINER_ID=$(docker run -d --name aneos-test aneos:integration-test)
        
        # Wait for container to initialize
        sleep 20
        
        # Check if container is running
        if docker ps | grep -q aneos-test; then
          echo "✅ Container started successfully"
        else
          echo "❌ Container failed to start"
          echo "Container logs:"
          docker logs aneos-test
          exit 1
        fi
        
        # Test 2: Python module imports
        echo "Testing Python module imports..."
        docker exec aneos-test python -c "import aneos_api; print('✅ aneos_api import successful')"
        docker exec aneos-test python -c "import aneos_core; print('✅ aneos_core import successful')"
        
        # Test 3: File system structure
        echo "Testing file system structure..."
        docker exec aneos-test ls -la /app/
        docker exec aneos-test ls -la /app/aneos_api/
        docker exec aneos-test ls -la /app/aneos_core/
        
        # Test 4: Health check (if API is available)
        echo "Testing health endpoint..."
        sleep 5  # Allow time for API startup
        
        # Try to access health endpoint with timeout
        if timeout 30 docker exec aneos-test python -c "
import requests
import time
for i in range(5):
    try:
        response = requests.get('http://localhost:8000/health', timeout=10)
        if response.status_code == 200:
            print('✅ Health endpoint accessible')
            break
    except Exception as e:
        if i == 4:
            print('⚠️  Health endpoint not available (may be normal for this test)')
        time.sleep(5)
" 2>/dev/null; then
          echo "Health endpoint test completed"
        else
          echo "⚠️  Health endpoint test timeout - continuing"
        fi
        
        # Test 5: Resource usage
        echo "Testing resource usage..."
        MEMORY_USAGE=$(docker stats --no-stream aneos-test | tail -n 1 | awk '{print $4}')
        echo "Memory usage: $MEMORY_USAGE"
        
        # Test 6: Basic functionality
        echo "Testing basic Python functionality..."
        docker exec aneos-test python -c "
import sys
print(f'Python version: {sys.version}')
print('✅ Python functionality test passed')
"
        
        # Cleanup
        docker rm -f aneos-test
        
        echo "✅ All integration tests passed"
        
    - name: Test Docker Compose setup
      run: |
        echo "=== Docker Compose Integration Test ==="
        
        cd "${{ env.ANEOS_PROJECT_PATH }}"
        
        # Check if docker-compose.yml exists
        if [ ! -f "docker-compose.yml" ]; then
          echo "⚠️  docker-compose.yml not found - skipping Docker Compose test"
          exit 0
        fi
        
        # Start services in background
        docker-compose up -d
        
        # Wait for services to be ready
        sleep 30
        
        # Check if main service is running
        if docker-compose ps | grep -q "aneos-api.*Up"; then
          echo "✅ aNEOS API service started successfully"
        else
          echo "❌ aNEOS API service failed to start"
          echo "Service status:"
          docker-compose ps
          echo "Service logs:"
          docker-compose logs aneos-api
          docker-compose down
          exit 1
        fi
        
        # Test service connectivity (if accessible)
        echo "Testing service connectivity..."
        if docker-compose exec -T aneos-api python -c "import aneos_api; print('✅ Service connectivity test passed')" 2>/dev/null; then
          echo "✅ Service connectivity test passed"
        else
          echo "⚠️  Service connectivity test not available"
        fi
        
        # Cleanup
        docker-compose down
        
        echo "✅ Docker Compose test completed"

  # Summary job
  docker-summary:
    name: Docker Build Summary
    runs-on: ubuntu-latest
    needs: [docker-build, docker-security-scan, docker-integration-test]
    if: always()
    
    steps:
    - name: Print summary
      run: |
        echo "=== aNEOS Docker Build & Deploy Summary ==="
        echo "Build Status: ${{ needs.docker-build.result }}"
        echo "Security Scan Status: ${{ needs.docker-security-scan.result }}"
        echo "Integration Test Status: ${{ needs.docker-integration-test.result }}"
        
        if [ "${{ needs.docker-build.result }}" = "success" ]; then
          echo "✅ Docker images built successfully for linux/amd64 and linux/arm64"
        else
          echo "❌ Docker build failed"
        fi
        
        if [ "${{ needs.docker-security-scan.result }}" = "success" ]; then
          echo "✅ Security scanning completed"
        else
          echo "⚠️  Security scanning had issues"
        fi
        
        if [ "${{ needs.docker-integration-test.result }}" = "success" ]; then
          echo "✅ Integration tests passed"
        else
          echo "❌ Integration tests failed"
        fi
        
        echo ""
        echo "=== Next Steps ==="
        if [ "${{ needs.docker-build.result }}" = "success" ] && [ "${{ github.event_name }}" != "pull_request" ]; then
          echo "🚀 Docker images have been built and pushed to ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/aneos"
          echo "📦 Available platforms: linux/amd64, linux/arm64"
          echo "🏷️  Tags: latest (main branch), version tags (releases)"
        else
          echo "🔧 Review the build logs above for any issues that need to be addressed"
        fi
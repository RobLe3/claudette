name: Security Scanning & Vulnerability Management

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scans weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      deep_scan:
        description: 'Run deep security scan (includes SAST, DAST, secrets)'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  security-events: write
  actions: read
  issues: write
  pull-requests: write
  checks: write
  statuses: write

env:
  NODE_ENV: production
  CI: true
  # Optimize npm operations
  NPM_CONFIG_PROGRESS: false
  NPM_CONFIG_AUDIT: false
  NPM_CONFIG_FUND: false

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
        
    - name: Install dependencies
      run: |
        # Optimized dependency installation
        npm ci --no-audit --no-fund --prefer-offline --no-optional
      
    - name: Run npm audit
      run: |
        echo "Running npm audit..."
        npm audit --audit-level moderate --json > npm_audit.json || true
        
        # Generate human-readable report
        npm audit --audit-level moderate > npm_audit_report.txt || true
        
        echo "=== npm audit Summary ==="
        if [ -f npm_audit_report.txt ]; then
          head -20 npm_audit_report.txt
        else
          echo "No audit report generated"
        fi
        
    - name: Check for high/critical vulnerabilities
      run: |
        if [ -f npm_audit.json ]; then
          # Parse vulnerability counts with better error handling
          HIGH_COUNT=$(cat npm_audit.json | jq -r '.metadata.vulnerabilities.high // 0' 2>/dev/null || echo "0")
          CRITICAL_COUNT=$(cat npm_audit.json | jq -r '.metadata.vulnerabilities.critical // 0' 2>/dev/null || echo "0")
          MODERATE_COUNT=$(cat npm_audit.json | jq -r '.metadata.vulnerabilities.moderate // 0' 2>/dev/null || echo "0")
          
          echo "Critical vulnerabilities: $CRITICAL_COUNT"
          echo "High vulnerabilities: $HIGH_COUNT"
          echo "Moderate vulnerabilities: $MODERATE_COUNT"
          
          # Only fail on critical vulnerabilities for now
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found!"
            echo "Critical vulnerabilities must be addressed before release."
            # Show details of critical vulnerabilities
            echo "Critical vulnerability details:"
            cat npm_audit.json | jq -r '.vulnerabilities | to_entries[] | select(.value.severity == "critical") | "\(.key): \(.value.title)"' 2>/dev/null || echo "Unable to parse vulnerability details"
            exit 1
          elif [ "$HIGH_COUNT" -gt 0 ]; then
            echo "⚠️ High vulnerabilities found - review required but not blocking"
            echo "High vulnerability details:"
            cat npm_audit.json | jq -r '.vulnerabilities | to_entries[] | select(.value.severity == "high") | "\(.key): \(.value.title)"' 2>/dev/null | head -5 || echo "Unable to parse vulnerability details"
          else
            echo "✅ No critical vulnerabilities found"
          fi
        else
          echo "✅ No npm audit results to analyze"
        fi
        
    - name: Dependency Review (PR only)
      if: github.event_name == 'pull_request'
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: critical
        
    - name: Upload audit results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-audit-results
        path: |
          npm_audit.json
          npm_audit_report.txt
        retention-days: 30

  # Static Application Security Testing (SAST)
  sast-scan:
    name: SAST - Static Code Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
        
    - name: Install dependencies
      run: |
        # Optimized dependency installation
        npm ci --no-audit --no-fund --prefer-offline --no-optional
      
    - name: CodeQL Analysis - Initialize
      uses: github/codeql-action/init@v3
      with:
        languages: javascript,typescript
        queries: +security-and-quality
        
    - name: Build for analysis
      run: |
        npm run build || {
          echo "Build failed, analyzing source files directly"
          echo "This is acceptable for security analysis"
        }
      
    - name: CodeQL Analysis - Analyze
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"
        upload: true
      
    - name: ESLint Security Scan
      run: |
        npx eslint . --ext .js,.ts --format json --output-file eslint-security.json || true
        npx eslint . --ext .js,.ts --format unix | head -50 || true
        
    - name: Semgrep Security Scan
      if: github.event.inputs.deep_scan == 'true' || github.event_name == 'schedule'
      run: |
        pip install semgrep
        semgrep --config=auto --json --output=semgrep-results.json . || true
        semgrep --config=auto . | head -100 || true
        
    - name: Upload SAST results
      uses: actions/upload-artifact@v4
      with:
        name: sast-scan-results
        path: |
          eslint-security.json
          semgrep-results.json
        retention-days: 30

  # Secrets detection
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: TruffleHog Secrets Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --only-verified --exclude-paths=.github/trufflehog-exclude.txt --format=json --no-update
      continue-on-error: true
      
    - name: Process TruffleHog Results
      run: |
        if [ -f "trufflehog-results.json" ]; then
          echo "TruffleHog scan completed"
          # Check if any verified secrets found
          if [ -s "trufflehog-results.json" ]; then
            echo "⚠️ Potential secrets detected - manual review required"
            head -10 trufflehog-results.json
          else
            echo "✅ No verified secrets detected"
          fi
        else
          echo "✅ TruffleHog scan completed successfully"
        fi
        
    - name: GitLeaks Secrets Scan
      if: github.event.inputs.deep_scan == 'true' || github.event_name == 'schedule'
      run: |
        docker run --rm -v $(pwd):/path zricethezav/gitleaks:latest detect --source=/path --report-format=json --report-path=/path/gitleaks-report.json || true
        
        if [ -f gitleaks-report.json ]; then
          echo "=== GitLeaks Results ==="
          cat gitleaks-report.json | jq '.[] | {file: .file, secret: .secret, rule: .rule}' || echo "No secrets found"
        fi
        
    - name: Check for sensitive patterns
      run: |
        echo "Checking for sensitive patterns..."
        
        # Check for common sensitive patterns
        grep -r -i "password\|secret\|key\|token" --include="*.js" --include="*.ts" . > sensitive_patterns.txt || true
        
        # Filter out obviously safe patterns (comments, variable names, etc.)
        grep -v -i "// password\|/\* password\|\.password\|password:\|secretKey\|apiKey" sensitive_patterns.txt > filtered_patterns.txt || true
        
        if [ -s filtered_patterns.txt ]; then
          echo "⚠️ Potential sensitive patterns found:"
          head -20 filtered_patterns.txt
        else
          echo "✅ No suspicious sensitive patterns found"
        fi
        
    - name: Upload secrets scan results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: secrets-scan-results
        path: |
          trufflehog-results.json
          gitleaks-report.json
          sensitive_patterns.txt
          filtered_patterns.txt
        retention-days: 30

  # Container security (if Docker is used)
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event.inputs.deep_scan == 'true' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Create security-focused Dockerfile
      run: |
        cat > Dockerfile.security << 'EOF'
        FROM node:20-alpine
        
        # Install security updates and required tools
        RUN apk update && apk upgrade && apk add --no-cache dumb-init
        
        # Create non-root user with proper group
        RUN addgroup -g 1001 -S claudette && adduser -S claudette -u 1001 -G claudette
        
        WORKDIR /app
        
        # Copy package files and install dependencies
        COPY package*.json ./
        RUN npm ci --only=production --no-audit --no-fund && npm cache clean --force
        
        # Copy source and build
        COPY src/ ./src/
        COPY tsconfig.json ./
        COPY claudette ./claudette
        
        RUN npm run build || echo "Build failed, using source files"
        RUN chmod +x ./claudette
        
        # Set proper ownership
        RUN chown -R claudette:claudette /app
        
        # Switch to non-root user
        USER claudette
        
        # Use dumb-init for proper signal handling
        ENTRYPOINT ["dumb-init", "--"]
        CMD ["./claudette", "--help"]
        EOF
        
    - name: Build container for scanning
      run: |
        docker build -f Dockerfile.security -t claudette:security-scan . --no-cache
        
    - name: Verify container build
      run: |
        echo "Verifying container build..."
        docker images claudette:security-scan
        docker run --rm claudette:security-scan --version || echo "Version check failed, but container exists"
        
    - name: Run Trivy container scan
      run: |
        docker run --rm -v $(pwd):/workspace \
          aquasec/trivy:latest image \
          --format json --output /workspace/trivy-report.json \
          claudette:security-scan || true
          
        # Generate human-readable report
        docker run --rm -v $(pwd):/workspace \
          aquasec/trivy:latest image \
          --format table \
          claudette:security-scan > trivy-report.txt || true
          
        echo "=== Container Security Scan Results ==="
        head -50 trivy-report.txt
        
    - name: Upload container scan results
      uses: actions/upload-artifact@v4
      with:
        name: container-scan-results
        path: |
          trivy-report.json
          trivy-report.txt
        retention-days: 30

  # Security compliance check
  compliance-check:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check security documentation
      run: |
        echo "=== Security Compliance Check ==="
        
        # Check for security documentation
        if [ -f "SECURITY.md" ] || [ -f "docs/SECURITY.md" ]; then
          echo "✅ Security documentation found"
        else
          echo "⚠️ Security documentation missing"
        fi
        
        # Check for vulnerability disclosure policy
        if grep -r -i "security.*report\|vulnerability.*report" . --include="*.md" >/dev/null 2>&1; then
          echo "✅ Vulnerability disclosure policy found"
        else
          echo "⚠️ Vulnerability disclosure policy not found"
        fi
        
        # Check for secure coding practices
        echo "Checking for secure coding practices..."
        
        # Check for input validation
        if grep -r "validate\|sanitize" --include="*.js" --include="*.ts" src/ >/dev/null 2>&1; then
          echo "✅ Input validation patterns found"
        else
          echo "⚠️ Input validation patterns not found"
        fi
        
        # Check for error handling
        if grep -r "try.*catch\|error.*handler" --include="*.js" --include="*.ts" src/ >/dev/null 2>&1; then
          echo "✅ Error handling patterns found"
        else
          echo "⚠️ Error handling patterns not found"
        fi
        
    - name: License compliance check
      run: |
        echo "=== License Compliance Check ==="
        
        # Check for license file
        if [ -f "LICENSE" ] || [ -f "LICENSE.md" ]; then
          echo "✅ License file found"
          head -5 LICENSE* 2>/dev/null
        else
          echo "⚠️ License file missing"
        fi
        
        # Check package.json license field
        if grep -q '"license"' package.json; then
          echo "✅ License specified in package.json"
          grep '"license"' package.json
        else
          echo "⚠️ License not specified in package.json"
        fi
        
    - name: Generate compliance report
      run: |
        cat > compliance_report.md << 'EOF'
        # Claudette Security Compliance Report
        
        **Generated:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')
        **Commit:** ${{ github.sha }}
        **Branch:** ${{ github.ref_name }}
        
        ## Security Documentation
        - Security policy: $([ -f "SECURITY.md" ] && echo "✅ Present" || echo "⚠️ Missing")
        - Vulnerability disclosure: $(grep -r -i "security.*report" . --include="*.md" >/dev/null 2>&1 && echo "✅ Present" || echo "⚠️ Missing")
        
        ## Code Security Practices
        - Input validation: $(grep -r "validate\|sanitize" --include="*.js" --include="*.ts" src/ >/dev/null 2>&1 && echo "✅ Implemented" || echo "⚠️ Not found")
        - Error handling: $(grep -r "try.*catch\|error.*handler" --include="*.js" --include="*.ts" src/ >/dev/null 2>&1 && echo "✅ Implemented" || echo "⚠️ Not found")
        
        ## License Compliance
        - License file: $([ -f "LICENSE" ] && echo "✅ Present" || echo "⚠️ Missing")
        - License in package.json: $(grep -q '"license"' package.json && echo "✅ Specified" || echo "⚠️ Missing")
        
        ## Recommendations
        - Implement regular security reviews
        - Set up automated dependency updates
        - Configure branch protection rules
        - Enable security advisories
        EOF
        
    - name: Upload compliance report
      uses: actions/upload-artifact@v4
      with:
        name: compliance-report
        path: compliance_report.md
        retention-days: 90

  # Security summary and reporting
  security-summary:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secrets-scan, compliance-check]
    if: always()
    
    steps:
    - name: Download all security artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: '*scan-results'
        merge-multiple: true
        
    - name: Download compliance report
      uses: actions/download-artifact@v4
      with:
        name: compliance-report
        
    - name: Generate security summary
      run: |
        cat > generate_security_summary.js << 'EOF'
        const fs = require('fs');
        
        function generateSummary() {
          let summary = `# Claudette Security Summary\n\n`;
          summary += `**Generated:** ${new Date().toISOString()}\n`;
          summary += `**Commit:** ${process.env.GITHUB_SHA || 'local'}\n`;
          summary += `**Branch:** ${process.env.GITHUB_REF_NAME || 'local'}\n\n`;
          
          // Dependency scan results
          if (fs.existsSync('npm_audit.json')) {
            try {
              const audit = JSON.parse(fs.readFileSync('npm_audit.json'));
              const vulns = audit.metadata?.vulnerabilities || {};
              
              summary += `## 🔒 Dependency Security\n\n`;
              summary += `| Severity | Count |\n`;
              summary += `|----------|-------|\n`;
              summary += `| Critical | ${vulns.critical || 0} |\n`;
              summary += `| High     | ${vulns.high || 0} |\n`;
              summary += `| Moderate | ${vulns.moderate || 0} |\n`;
              summary += `| Low      | ${vulns.low || 0} |\n\n`;
              
              if (vulns.critical > 0) {
                summary += `⚠️ **Critical vulnerabilities must be addressed immediately**\n\n`;
              } else if (vulns.high > 0) {
                summary += `⚠️ **High severity vulnerabilities require attention**\n\n`;
              } else {
                summary += `✅ **No critical or high severity vulnerabilities**\n\n`;
              }
            } catch (e) {
              summary += `## 🔒 Dependency Security\n\n❌ Failed to parse audit results\n\n`;
            }
          }
          
          // Secrets scan results
          summary += `## 🗝️ Secrets Detection\n\n`;
          
          let secretsFound = false;
          if (fs.existsSync('trufflehog-results.json')) {
            try {
              const content = fs.readFileSync('trufflehog-results.json', 'utf8').trim();
              if (content) {
                secretsFound = true;
                summary += `⚠️ **Potential secrets detected - review required**\n\n`;
              }
            } catch (e) {
              // File exists but may be empty or invalid
            }
          }
          
          if (!secretsFound) {
            summary += `✅ **No secrets detected in scan**\n\n`;
          }
          
          // SAST results
          summary += `## 🔍 Static Analysis\n\n`;
          if (fs.existsSync('eslint-security.json')) {
            summary += `✅ **ESLint security scan completed**\n`;
          }
          
          if (fs.existsSync('semgrep-results.json')) {
            summary += `✅ **Semgrep security scan completed**\n`;
          }
          
          summary += `✅ **CodeQL analysis completed**\n\n`;
          
          // Container security (if available)
          if (fs.existsSync('trivy-report.json')) {
            summary += `## 🐳 Container Security\n\n`;
            summary += `✅ **Container vulnerability scan completed**\n\n`;
          }
          
          // Compliance
          summary += `## 📋 Compliance Status\n\n`;
          if (fs.existsSync('compliance_report.md')) {
            const compliance = fs.readFileSync('compliance_report.md', 'utf8');
            // Extract key compliance info
            const lines = compliance.split('\n').filter(line => 
              line.includes('✅') || line.includes('⚠️')
            ).slice(0, 10);
            summary += lines.join('\n') + '\n\n';
          }
          
          summary += `## 🎯 Security Score\n\n`;
          
          // Calculate a simple security score
          let score = 100;
          if (fs.existsSync('npm_audit.json')) {
            try {
              const audit = JSON.parse(fs.readFileSync('npm_audit.json'));
              const vulns = audit.metadata?.vulnerabilities || {};
              score -= (vulns.critical * 30) + (vulns.high * 15) + (vulns.moderate * 5) + (vulns.low * 1);
            } catch (e) {}
          }
          
          if (secretsFound) score -= 20;
          
          score = Math.max(0, score);
          
          let scoreEmoji = '🔴';
          if (score >= 90) scoreEmoji = '🟢';
          else if (score >= 70) scoreEmoji = '🟡';
          else if (score >= 50) scoreEmoji = '🟠';
          
          summary += `**Overall Security Score: ${scoreEmoji} ${score}/100**\n\n`;
          
          if (score >= 90) {
            summary += `✅ Excellent security posture\n`;
          } else if (score >= 70) {
            summary += `⚠️ Good security posture with minor issues\n`;
          } else if (score >= 50) {
            summary += `⚠️ Moderate security issues need attention\n`;
          } else {
            summary += `❌ Critical security issues require immediate action\n`;
          }
          
          summary += `\n## 📊 Scan Coverage\n\n`;
          summary += `- ✅ Dependency vulnerabilities\n`;
          summary += `- ✅ Static code analysis (SAST)\n`;
          summary += `- ✅ Secrets detection\n`;
          summary += `- ✅ License compliance\n`;
          summary += `- ${fs.existsSync('trivy-report.json') ? '✅' : '⚠️'} Container security\n`;
          
          fs.writeFileSync('security_summary.md', summary);
          console.log(summary);
        }
        
        generateSummary();
        EOF
        
        node generate_security_summary.js
        
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary-report
        path: security_summary.md
        retention-days: 90
        
    - name: Comment security summary on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          if (fs.existsSync('security_summary.md')) {
            const summary = fs.readFileSync('security_summary.md', 'utf8');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Scan Results\n\n${summary}\n\n---\n🔗 [View detailed security reports](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`
            });
          }
          
    - name: Check security gate
      run: |
        # Parse security summary for critical issues
        if [ -f npm_audit.json ]; then
          CRITICAL_COUNT=$(cat npm_audit.json | jq '.metadata.vulnerabilities.critical // 0')
          if [ "$CRITICAL_COUNT" -gt 0 ]; then
            echo "❌ Security gate failed: Critical vulnerabilities found"
            exit 1
          fi
        fi
        
        echo "✅ Security gate passed"
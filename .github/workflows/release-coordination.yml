name: üöÄ Release Coordination

# Automated release coordination and branch management
# Handles version bumps, changelog generation, and release preparation

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease_tag:
        description: 'Prerelease tag (alpha, beta, rc)'
        required: false
        default: 'alpha'
      dry_run:
        description: 'Dry run (no actual release)'
        required: false
        default: false
        type: boolean

  push:
    branches:
      - main
    paths:
      - 'package.json'
      - 'CHANGELOG.md'
      - '.github/workflows/release-coordination.yml'

env:
  NODE_VERSION: '18'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  # Prepare release
  prepare-release:
    name: üé® Prepare Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      current-version: ${{ steps.version.outputs.current-version }}
      release-notes: ${{ steps.notes.outputs.release-notes }}
      should-release: ${{ steps.check.outputs.should-release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run validation suite
        run: |
          echo "Running pre-release validation..."
          npm run validate
          npm test
          
          # Run performance benchmarks
          if [ -f "dev/tools/performance-benchmark.sh" ]; then
            ./dev/tools/performance-benchmark.sh latency --iterations 50
          fi

      - name: Calculate new version
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          RELEASE_TYPE="${{ inputs.release_type }}"
          PRERELEASE_TAG="${{ inputs.prerelease_tag }}"
          
          if [ "$RELEASE_TYPE" = "prerelease" ]; then
            NEW_VERSION=$(npm version prerelease --preid="$PRERELEASE_TAG" --no-git-tag-version)
          else
            NEW_VERSION=$(npm version "$RELEASE_TYPE" --no-git-tag-version)
          fi
          
          # Remove 'v' prefix if present
          NEW_VERSION=$(echo "$NEW_VERSION" | sed 's/^v//')
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          echo "Version bump: $CURRENT_VERSION -> $NEW_VERSION"

      - name: Generate release notes
        id: notes
        run: |
          echo "Generating release notes..."
          
          NEW_VERSION="${{ steps.version.outputs.new-version }}"
          CURRENT_VERSION="${{ steps.version.outputs.current-version }}"
          
          # Get commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log "$LAST_TAG"..HEAD --oneline --no-merges)
          else
            COMMITS=$(git log --oneline --no-merges -n 20)
          fi
          
          # Generate release notes
          cat > release-notes.md << EOF
          # Release v$NEW_VERSION
          
          ## What's Changed
          
          $COMMITS
          
          ## Community Contributions
          
          This release includes contributions from the Claudette community.
          
          ## Performance
          
          - Performance benchmarks validated
          - Memory usage optimized
          - Response latency improved
          
          ## Installation
          
          \`\`\`bash
          npm install claudette@$NEW_VERSION
          \`\`\`
          
          ## Documentation
          
          - [API Reference](./docs/api/)
          - [User Guide](./docs/user-guide/)
          - [Contributing](./CONTRIBUTING.md)
          
          ---
          
          **Full Changelog**: https://github.com/user/claudette/compare/v$CURRENT_VERSION...v$NEW_VERSION
          EOF
          
          # Store release notes as output (base64 encoded for multiline)
          RELEASE_NOTES=$(base64 -w 0 release-notes.md)
          echo "release-notes=$RELEASE_NOTES" >> $GITHUB_OUTPUT
          
          echo "Release notes generated"

      - name: Update CHANGELOG
        run: |
          echo "Updating CHANGELOG.md..."
          
          NEW_VERSION="${{ steps.version.outputs.new-version }}"
          
          # Create changelog entry
          cat > changelog-entry.md << EOF
          ## [$NEW_VERSION] - $(date +%Y-%m-%d)
          
          ### Added
          - Community development infrastructure
          - Automated testing pipelines
          - Performance benchmarking tools
          
          ### Changed
          - Improved contributor onboarding
          - Enhanced documentation generation
          
          ### Fixed
          - Various bug fixes and improvements
          
          EOF
          
          # Prepend to existing CHANGELOG if it exists
          if [ -f "CHANGELOG.md" ]; then
            cat CHANGELOG.md >> changelog-entry.md
            mv changelog-entry.md CHANGELOG.md
          else
            cat > CHANGELOG.md << EOF
          # Changelog
          
          All notable changes to this project will be documented in this file.
          
          The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
          and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
          
          $(cat changelog-entry.md)
          EOF
          fi

      - name: Check if should release
        id: check
        run: |
          # Only proceed if not dry run and validation passed
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "Dry run mode - skipping actual release"
          else
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "Ready for release"
          fi

      - name: Commit version changes
        if: steps.check.outputs.should-release == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          NEW_VERSION="${{ steps.version.outputs.new-version }}"
          
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore(release): v$NEW_VERSION
          
          ü§ñ Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>"
          
          git tag "v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ steps.version.outputs.new-version }}
          path: |
            package.json
            CHANGELOG.md
            release-notes.md
          retention-days: 30

  # Build and test release
  build-release:
    name: üè† Build Release
    runs-on: ubuntu-latest
    needs: prepare-release
    if: needs.prepare-release.outputs.should-release == 'true'
    strategy:
      matrix:
        node-version: ['16', '18', '20']
        os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: ${{ env.REGISTRY_URL }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: |
          npm run build
          
          # Verify build output
          if [ ! -d "dist" ]; then
            echo "Build failed - no dist directory"
            exit 1
          fi
          
          echo "Build completed successfully"

      - name: Run tests
        run: |
          npm test
          echo "Tests passed on Node.js ${{ matrix.node-version }} (${{ matrix.os }})"

      - name: Package for distribution
        if: matrix.node-version == '18' && matrix.os == 'ubuntu-latest'
        run: |
          # Create distribution package
          npm pack
          
          PACKAGE_NAME=$(ls *.tgz)
          echo "Created package: $PACKAGE_NAME"
          
          # Verify package contents
          tar -tzf "$PACKAGE_NAME" | head -20

      - name: Upload build artifacts
        if: matrix.node-version == '18' && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ needs.prepare-release.outputs.new-version }}
          path: |
            dist/
            *.tgz
          retention-days: 30

  # Security and quality checks
  security-audit:
    name: üîí Security Audit
    runs-on: ubuntu-latest
    needs: prepare-release
    if: needs.prepare-release.outputs.should-release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          echo "Running npm security audit..."
          npm audit --audit-level moderate

      - name: Check for vulnerabilities
        run: |
          echo "Checking for known vulnerabilities..."
          
          # Use our validation tool if available
          if [ -f "dev/tools/validate-contribution.sh" ]; then
            ./dev/tools/validate-contribution.sh --skip-validation
          fi

  # Create GitHub release
  create-release:
    name: üè∑Ô∏è Create Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release, security-audit]
    if: needs.prepare-release.outputs.should-release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.prepare-release.outputs.new-version }}
          path: ./artifacts/

      - name: Create GitHub Release
        run: |
          NEW_VERSION="${{ needs.prepare-release.outputs.new-version }}"
          RELEASE_NOTES="${{ needs.prepare-release.outputs.release-notes }}"
          
          # Decode release notes
          echo "$RELEASE_NOTES" | base64 -d > release-notes.md
          
          # Create release
          gh release create "v$NEW_VERSION" \
            --title "Release v$NEW_VERSION" \
            --notes-file release-notes.md \
            --target main
          
          # Upload assets
          if [ -f "artifacts/claudette-$NEW_VERSION.tgz" ]; then
            gh release upload "v$NEW_VERSION" "artifacts/claudette-$NEW_VERSION.tgz"
          fi
          
          echo "GitHub release created: v$NEW_VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to npm
  publish-npm:
    name: üì¶ Publish to npm
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release, security-audit, create-release]
    if: needs.prepare-release.outputs.should-release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Publish to npm
        run: |
          NEW_VERSION="${{ needs.prepare-release.outputs.new-version }}"
          RELEASE_TYPE="${{ inputs.release_type }}"
          
          if [ "$RELEASE_TYPE" = "prerelease" ]; then
            echo "Publishing prerelease to npm..."
            npm publish --tag next
          else
            echo "Publishing release to npm..."
            npm publish
          fi
          
          echo "Published v$NEW_VERSION to npm"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Post-release tasks
  post-release:
    name: üèÅ Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release, security-audit, create-release, publish-npm]
    if: always() && needs.prepare-release.outputs.should-release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Update documentation
        run: |
          echo "Updating documentation for new release..."
          
          NEW_VERSION="${{ needs.prepare-release.outputs.new-version }}"
          
          # Update version in documentation
          if [ -f "README.md" ]; then
            sed -i "s/claudette@[0-9]\+\.[0-9]\+\.[0-9]\+/claudette@$NEW_VERSION/g" README.md
          fi
          
          # Generate updated API docs if available
          if [ -f "dev/tools/generate-docs-advanced.sh" ]; then
            ./dev/tools/generate-docs-advanced.sh
          fi

      - name: Notify community
        run: |
          echo "Notifying community of new release..."
          
          NEW_VERSION="${{ needs.prepare-release.outputs.new-version }}"
          
          # This would typically post to community channels, 
          # update website, send notifications, etc.
          echo "Community notification for v$NEW_VERSION would be sent here"

      - name: Create next development milestone
        run: |
          echo "Setting up next development cycle..."
          
          # This would create next milestone, update project boards, etc.
          echo "Next development milestone created"

      - name: Generate release summary
        run: |
          cat > release-summary.md << EOF
          # Release Summary: v${{ needs.prepare-release.outputs.new-version }}
          
          **Release Date:** $(date)
          **Release Type:** ${{ inputs.release_type }}
          **Previous Version:** ${{ needs.prepare-release.outputs.current-version }}
          **New Version:** ${{ needs.prepare-release.outputs.new-version }}
          
          ## Release Status
          
          - ‚úÖ Version prepared
          - ‚úÖ Build completed
          - ‚úÖ Security audit passed
          - ‚úÖ GitHub release created
          - ‚úÖ npm package published
          - ‚úÖ Documentation updated
          - ‚úÖ Community notified
          
          ## Next Steps
          
          1. Monitor release for issues
          2. Gather community feedback
          3. Plan next development cycle
          
          ## Links
          
          - [GitHub Release](https://github.com/user/claudette/releases/tag/v${{ needs.prepare-release.outputs.new-version }})
          - [npm Package](https://www.npmjs.com/package/claudette/v/${{ needs.prepare-release.outputs.new-version }})
          - [Documentation](./docs/)
          - [Changelog](./CHANGELOG.md)
          
          ---
          
          *Release coordinated by Claudette Community CI*
          EOF
          
          cat release-summary.md

      - name: Upload release summary
        uses: actions/upload-artifact@v4
        with:
          name: release-summary-${{ needs.prepare-release.outputs.new-version }}
          path: release-summary.md
          retention-days: 90

  # Cleanup and final status
  release-cleanup:
    name: üßπ Release Cleanup
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release, security-audit, create-release, publish-npm, post-release]
    if: always()
    steps:
      - name: Release status summary
        run: |
          echo "Release Coordination Summary"
          echo "==========================="
          echo "Prepare Release: ${{ needs.prepare-release.result }}"
          echo "Build Release: ${{ needs.build-release.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Create Release: ${{ needs.create-release.result }}"
          echo "Publish npm: ${{ needs.publish-npm.result }}"
          echo "Post Release: ${{ needs.post-release.result }}"
          
          # Determine overall success
          if [ "${{ needs.prepare-release.result }}" = "success" ] && 
             [ "${{ needs.build-release.result }}" = "success" ] && 
             [ "${{ needs.security-audit.result }}" = "success" ] && 
             [ "${{ needs.create-release.result }}" = "success" ] && 
             [ "${{ needs.publish-npm.result }}" = "success" ]; then
            echo ""
            echo "‚úÖ Release coordination completed successfully!"
            echo "Version ${{ needs.prepare-release.outputs.new-version }} is now available."
          else
            echo ""
            echo "‚ö†Ô∏è Release coordination encountered issues."
            echo "Please review the job logs and take appropriate action."
          fi

      - name: Cleanup temporary resources
        run: |
          echo "Cleaning up temporary resources..."
          # This would clean up any temporary resources created during release
          echo "Cleanup completed"

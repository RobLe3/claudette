-- Ultipa GraphDB Schema for Claudette Meta-Cognitive Problem-Solving
-- Optimized for GQL Standard and Ultipa-specific performance features

-- ==============================================================================
-- NODE SCHEMAS (Problem-Solving Entities)
-- ==============================================================================

-- Problem State Nodes - Core problem representations
CREATE SCHEMA NODE ClaudetteProblem (
    -- Identity and Classification
    problem_id STRING NOT NULL,
    problem_hash STRING NOT NULL,  -- MD5 hash for deduplication
    description TEXT NOT NULL,
    domain STRING NOT NULL,
    subdomain STRING,
    
    -- Problem Characteristics
    complexity_level INT32 NOT NULL,    -- 1-10 scale
    problem_type STRING NOT NULL,       -- 'construction', 'optimization', 'analysis', etc.
    cognitive_requirements ARRAY<STRING>,
    estimated_tokens INT32,
    
    -- State Information
    state_type STRING NOT NULL,         -- 'initial', 'intermediate', 'solution', 'dead_end'
    confidence_score FLOAT NOT NULL,    -- 0.0-1.0
    cognitive_load INT32 NOT NULL,      -- Estimated cognitive complexity
    
    -- Context and Embeddings
    context_embedding ARRAY<FLOAT>,     -- Semantic embedding for similarity
    keywords ARRAY<STRING>,
    tags ARRAY<STRING>,
    
    -- Metadata
    created_timestamp DATETIME NOT NULL,
    session_id STRING NOT NULL,
    user_context JSON,
    
    -- Performance Metrics
    solving_attempts INT32 DEFAULT 0,
    success_rate FLOAT DEFAULT 0.0,
    avg_solution_time INT32 DEFAULT 0,
    
    -- Ultipa Optimizations
    INDEX problem_id,
    INDEX problem_hash,
    INDEX domain,
    INDEX complexity_level,
    INDEX state_type,
    INDEX created_timestamp
);

-- AI Response Nodes - Generated solutions and responses
CREATE SCHEMA NODE ClaudetteResponse (
    -- Identity
    response_id STRING NOT NULL,
    response_hash STRING NOT NULL,
    
    -- Content
    content TEXT NOT NULL,
    content_type STRING NOT NULL,    -- 'code', 'text', 'structured_data'
    content_length INT32 NOT NULL,
    
    -- Quality Metrics
    quality_score FLOAT NOT NULL,        -- 0.0-1.0 overall quality
    relevance_score FLOAT NOT NULL,      -- How relevant to the problem
    coherence_score FLOAT NOT NULL,      -- Internal consistency
    completeness_score FLOAT NOT NULL,   -- How complete the solution is
    accuracy_score FLOAT,                -- Factual accuracy (if measurable)
    
    -- Generation Metadata
    backend_used STRING NOT NULL,
    model_used STRING NOT NULL,
    tokens_input INT32 NOT NULL,
    tokens_output INT32 NOT NULL,
    cost_eur FLOAT NOT NULL,
    latency_ms INT32 NOT NULL,
    
    -- Processing Information
    cache_hit BOOLEAN DEFAULT FALSE,
    compression_applied BOOLEAN DEFAULT FALSE,
    summarization_applied BOOLEAN DEFAULT FALSE,
    optimization_level STRING,     -- 'none', 'basic', 'advanced'
    
    -- Response Context
    generation_timestamp DATETIME NOT NULL,
    session_id STRING NOT NULL,
    request_context JSON,
    
    -- Learning Metrics
    user_feedback_score FLOAT,      -- User rating if available
    subsequent_usage INT32 DEFAULT 0,  -- How often this response is referenced
    improvement_suggestions ARRAY<STRING>,
    
    INDEX response_id,
    INDEX response_hash,
    INDEX backend_used,
    INDEX quality_score,
    INDEX generation_timestamp,
    INDEX session_id
);

-- Solution Strategy Nodes - Problem-solving approaches
CREATE SCHEMA NODE SolutionStrategy (
    -- Identity
    strategy_id STRING NOT NULL,
    strategy_name STRING NOT NULL,
    strategy_version STRING NOT NULL,
    
    -- Strategy Definition
    description TEXT NOT NULL,
    strategy_type STRING NOT NULL,     -- 'decomposition', 'analogy', 'search', 'heuristic', 'synthesis'
    algorithm_type STRING,             -- 'graph_traversal', 'pattern_matching', 'optimization'
    
    -- Applicability
    applicable_domains ARRAY<STRING>,
    applicable_problem_types ARRAY<STRING>,
    complexity_range_min INT32 NOT NULL,
    complexity_range_max INT32 NOT NULL,
    
    -- Performance Metrics
    success_rate FLOAT NOT NULL,           -- Historical success rate
    avg_quality_improvement FLOAT,        -- Average quality gain
    avg_cognitive_cost INT32 NOT NULL,    -- Computational/cognitive cost
    avg_execution_time INT32 NOT NULL,    -- Average time to execute
    
    -- Learning Metrics
    usage_frequency INT32 DEFAULT 0,      -- How often it's used
    adaptation_count INT32 DEFAULT 0,     -- How often it's been adapted
    improvement_rate FLOAT DEFAULT 0.0,   -- Rate of performance improvement
    
    -- Prerequisites and Dependencies
    required_knowledge ARRAY<STRING>,
    prerequisite_strategies ARRAY<STRING>,
    incompatible_strategies ARRAY<STRING>,
    
    -- Strategy Parameters
    parameters JSON,                    -- Strategy-specific configuration
    tuning_history JSON,              -- History of parameter adjustments
    
    -- Metadata
    created_timestamp DATETIME NOT NULL,
    last_updated_timestamp DATETIME NOT NULL,
    creator STRING,                    -- 'system', 'user', 'learned'
    
    INDEX strategy_id,
    INDEX strategy_name,
    INDEX strategy_type,
    INDEX success_rate,
    INDEX applicable_domains,
    INDEX usage_frequency
);

-- Reasoning Step Nodes - Individual cognitive operations
CREATE SCHEMA NODE ReasoningStep (
    -- Identity
    step_id STRING NOT NULL,
    step_name STRING NOT NULL,
    step_category STRING NOT NULL,    -- 'analysis', 'synthesis', 'evaluation', 'transformation'
    
    -- Step Definition
    description TEXT NOT NULL,
    operation_type STRING NOT NULL,   -- 'decompose', 'analogize', 'synthesize', 'validate'
    input_types ARRAY<STRING>,        -- Required input types
    output_types ARRAY<STRING>,       -- Produced output types
    
    -- Cognitive Metrics
    base_cognitive_load INT32 NOT NULL,  -- Base cognitive complexity
    reliability_score FLOAT NOT NULL,    -- How reliable this step is
    precision_level FLOAT NOT NULL,      -- Precision of outputs
    speed_factor FLOAT NOT NULL,         -- Relative execution speed
    
    -- Execution Context
    required_context ARRAY<STRING>,
    optional_context ARRAY<STRING>,
    failure_modes ARRAY<STRING>,
    recovery_strategies ARRAY<STRING>,
    
    -- Learning Data
    execution_count INT32 DEFAULT 0,
    success_count INT32 DEFAULT 0,
    failure_count INT32 DEFAULT 0,
    avg_improvement_contribution FLOAT DEFAULT 0.0,
    
    -- Adaptation Information
    parameter_sensitivity JSON,       -- Which parameters affect performance
    optimization_history JSON,        -- History of optimizations
    
    -- Metadata
    created_timestamp DATETIME NOT NULL,
    last_executed_timestamp DATETIME,
    
    INDEX step_id,
    INDEX step_category,
    INDEX operation_type,
    INDEX reliability_score,
    INDEX execution_count
);

-- Knowledge Entity Nodes - Domain knowledge and concepts
CREATE SCHEMA NODE KnowledgeEntity (
    -- Identity
    entity_id STRING NOT NULL,
    entity_name STRING NOT NULL,
    entity_type STRING NOT NULL,      -- 'concept', 'technique', 'pattern', 'principle'
    
    -- Knowledge Content
    description TEXT NOT NULL,
    definition TEXT,
    examples ARRAY<STRING>,
    counterexamples ARRAY<STRING>,
    
    -- Categorization
    domain STRING NOT NULL,
    subdomain STRING,
    abstraction_level INT32 NOT NULL, -- 1-10, concrete to abstract
    complexity_level INT32 NOT NULL,  -- 1-10, simple to complex
    
    -- Relationships and Context
    prerequisites ARRAY<STRING>,      -- Required prior knowledge
    related_concepts ARRAY<STRING>,
    applications ARRAY<STRING>,
    
    -- Usage Metrics
    reference_count INT32 DEFAULT 0,     -- How often referenced
    success_correlation FLOAT DEFAULT 0.0, -- Correlation with solution success
    learning_difficulty FLOAT,           -- How hard to learn/apply
    
    -- Semantic Information
    semantic_embedding ARRAY<FLOAT>,     -- Vector representation
    synonyms ARRAY<STRING>,
    keywords ARRAY<STRING>,
    
    -- Evidence and Sources
    evidence_strength FLOAT NOT NULL,    -- How well-established this knowledge is
    source_types ARRAY<STRING>,          -- 'academic', 'empirical', 'experiential'
    confidence_interval JSON,            -- Statistical confidence if applicable
    
    -- Metadata
    created_timestamp DATETIME NOT NULL,
    last_updated_timestamp DATETIME NOT NULL,
    validation_status STRING,          -- 'validated', 'provisional', 'deprecated'
    
    INDEX entity_id,
    INDEX entity_name,
    INDEX entity_type,
    INDEX domain,
    INDEX abstraction_level,
    INDEX reference_count
);

-- Backend Performance Nodes - AI backend performance tracking
CREATE SCHEMA NODE BackendPerformance (
    -- Identity
    backend_id STRING NOT NULL,
    backend_name STRING NOT NULL,
    backend_type STRING NOT NULL,      -- 'cloud', 'self_hosted', 'mock'
    
    -- Configuration
    model_name STRING NOT NULL,
    api_version STRING,
    configuration JSON,
    
    -- Performance Metrics
    avg_quality_score FLOAT NOT NULL,
    avg_latency_ms INT32 NOT NULL,
    avg_cost_per_token FLOAT NOT NULL,
    availability_score FLOAT NOT NULL,
    
    -- Domain-Specific Performance
    domain_performance JSON,          -- Performance breakdown by domain
    complexity_performance JSON,      -- Performance by complexity level
    problem_type_performance JSON,    -- Performance by problem type
    
    -- Usage Statistics
    total_requests INT32 DEFAULT 0,
    successful_requests INT32 DEFAULT 0,
    failed_requests INT32 DEFAULT 0,
    cache_hit_rate FLOAT DEFAULT 0.0,
    
    -- Resource Usage
    total_tokens_processed INT64 DEFAULT 0,
    total_cost_eur FLOAT DEFAULT 0.0,
    avg_tokens_per_request FLOAT,
    
    -- Time-Series Data
    performance_history JSON,         -- Historical performance data
    last_performance_update DATETIME NOT NULL,
    
    -- Health Metrics
    error_rate FLOAT DEFAULT 0.0,
    timeout_rate FLOAT DEFAULT 0.0,
    rate_limit_encounters INT32 DEFAULT 0,
    
    INDEX backend_id,
    INDEX backend_name,
    INDEX avg_quality_score,
    INDEX availability_score,
    INDEX last_performance_update
);

-- Problem-Solving Session Nodes - Complete problem-solving traces
CREATE SCHEMA NODE ProblemSession (
    -- Identity
    session_id STRING NOT NULL,
    session_type STRING NOT NULL,     -- 'single_problem', 'decomposed_problem', 'iterative_refinement'
    
    -- Session Overview
    initial_problem_id STRING NOT NULL,
    final_solution_id STRING,
    session_status STRING NOT NULL,   -- 'in_progress', 'completed', 'failed', 'abandoned'
    
    -- Execution Metrics
    total_steps INT32 NOT NULL,
    successful_steps INT32 NOT NULL,
    failed_steps INT32 NOT NULL,
    total_cognitive_load INT32 NOT NULL,
    total_execution_time INT32 NOT NULL,
    
    -- Quality Metrics
    final_quality_score FLOAT,
    quality_improvement FLOAT,        -- Improvement from initial to final
    efficiency_score FLOAT,           -- Quality/cost ratio
    
    -- Strategy Information
    primary_strategy_used STRING NOT NULL,
    strategy_adaptations INT32 DEFAULT 0,
    fallback_strategies_used ARRAY<STRING>,
    
    -- Learning Outcomes
    insights_discovered ARRAY<STRING>,
    patterns_identified ARRAY<STRING>,
    knowledge_gaps_found ARRAY<STRING>,
    improvements_suggested ARRAY<STRING>,
    
    -- Context
    user_context JSON,
    environmental_factors JSON,
    constraints JSON,
    
    -- Timestamps
    start_timestamp DATETIME NOT NULL,
    end_timestamp DATETIME,
    last_activity_timestamp DATETIME NOT NULL,
    
    INDEX session_id,
    INDEX initial_problem_id,
    INDEX session_status,
    INDEX start_timestamp,
    INDEX final_quality_score
);

-- ==============================================================================
-- EDGE SCHEMAS (Problem-Solving Relationships)
-- ==============================================================================

-- Problem State Transitions
CREATE SCHEMA EDGE LEADS_TO (
    -- Transition Metadata
    transition_type STRING NOT NULL,    -- 'decomposition', 'refinement', 'solution'
    reasoning_step_id STRING,           -- Which reasoning step caused this transition
    transformation_description TEXT,
    
    -- Probability and Confidence
    success_probability FLOAT NOT NULL,  -- Likelihood this transition leads to success
    confidence_level FLOAT NOT NULL,     -- Confidence in this transition
    evidence_strength FLOAT NOT NULL,    -- Supporting evidence
    
    -- Cost Metrics
    cognitive_cost INT32 NOT NULL,       -- Cognitive load for this transition
    time_cost INT32,                     -- Time required
    computational_cost FLOAT,           -- Resource usage
    
    -- Context
    context_requirements ARRAY<STRING>,  -- Required context for transition
    preconditions ARRAY<STRING>,        -- Must be true before transition
    postconditions ARRAY<STRING>,       -- Will be true after transition
    
    -- Learning Data
    usage_count INT32 DEFAULT 0,        -- How often this transition is used
    success_count INT32 DEFAULT 0,      -- How often it leads to success
    average_quality_delta FLOAT DEFAULT 0.0, -- Average quality change
    
    -- Metadata
    created_timestamp DATETIME NOT NULL,
    last_used_timestamp DATETIME
);

-- Strategy Application Relationships
CREATE SCHEMA EDGE APPLIES_STRATEGY (
    -- Application Context
    application_reason TEXT NOT NULL,    -- Why this strategy was selected
    applicability_score FLOAT NOT NULL, -- How well strategy fits problem
    expected_effectiveness FLOAT,       -- Predicted effectiveness
    actual_effectiveness FLOAT,         -- Actual measured effectiveness
    
    -- Execution Information
    parameters_used JSON,               -- Strategy parameters for this application
    modifications_made ARRAY<STRING>,   -- Any adaptations made
    execution_notes TEXT,
    
    -- Results
    outcome_quality FLOAT,              -- Quality of outcome
    execution_time INT32,               -- Actual execution time
    cognitive_load_actual INT32,        -- Actual cognitive load used
    
    -- Learning
    lessons_learned ARRAY<STRING>,      -- What was learned from this application
    improvements_identified ARRAY<STRING>, -- Potential improvements
    
    -- Metadata
    applied_timestamp DATETIME NOT NULL,
    applied_by STRING,                  -- 'system', 'user', 'hybrid'
    session_context JSON
);

-- Knowledge Utilization Relationships  
CREATE SCHEMA EDGE USES_KNOWLEDGE (
    -- Usage Context
    usage_type STRING NOT NULL,         -- 'prerequisite', 'application', 'validation'
    usage_depth STRING NOT NULL,        -- 'surface', 'intermediate', 'deep'
    criticality_level STRING NOT NULL,  -- 'essential', 'helpful', 'optional'
    
    -- Effectiveness
    knowledge_contribution FLOAT,       -- How much this knowledge contributed
    application_success BOOLEAN,        -- Was knowledge applied successfully
    gaps_identified ARRAY<STRING>,      -- Knowledge gaps discovered
    
    -- Context
    application_context TEXT,
    prerequisites_met BOOLEAN,
    related_knowledge_used ARRAY<STRING>,
    
    -- Metadata
    used_timestamp DATETIME NOT NULL,
    session_id STRING NOT NULL
);

-- Response Generation Relationships
CREATE SCHEMA EDGE GENERATES_RESPONSE (
    -- Generation Process
    generation_method STRING NOT NULL,   -- 'direct', 'synthesized', 'refined'
    processing_steps ARRAY<STRING>,     -- Steps taken to generate response
    optimizations_applied ARRAY<STRING>, -- Any optimizations used
    
    -- Input Processing
    prompt_processing_time INT32,       -- Time spent processing prompt
    context_integration_time INT32,     -- Time integrating context
    generation_time INT32,              -- Actual generation time
    
    -- Quality Assurance
    quality_checks_performed ARRAY<STRING>,
    quality_issues_found ARRAY<STRING>,
    quality_improvements_made ARRAY<STRING>,
    
    -- Backend Information
    backend_selection_reason TEXT,      -- Why this backend was chosen
    backend_performance_during_generation JSON,
    
    -- Metadata
    generated_timestamp DATETIME NOT NULL,
    generation_context JSON
);

-- Similarity and Pattern Relationships
CREATE SCHEMA EDGE SIMILAR_TO (
    -- Similarity Metrics
    overall_similarity FLOAT NOT NULL,   -- 0.0-1.0 overall similarity
    semantic_similarity FLOAT,          -- Semantic/meaning similarity
    structural_similarity FLOAT,        -- Problem structure similarity
    contextual_similarity FLOAT,        -- Context similarity
    
    -- Similarity Dimensions
    domain_match BOOLEAN,               -- Same domain
    complexity_similarity FLOAT,       -- Similar complexity
    problem_type_match BOOLEAN,        -- Same problem type
    
    -- Similarity Basis
    similarity_calculation_method STRING, -- How similarity was calculated
    key_similarity_features ARRAY<STRING>, -- What makes them similar
    key_differences ARRAY<STRING>,       -- What makes them different
    
    -- Usage Information
    similarity_used_for_transfer BOOLEAN DEFAULT FALSE,
    transfer_success_rate FLOAT,        -- If used for transfer, how successful
    
    -- Metadata
    calculated_timestamp DATETIME NOT NULL,
    calculation_confidence FLOAT NOT NULL
);

-- Learning and Improvement Relationships
CREATE SCHEMA EDGE LEARNS_FROM (
    -- Learning Type
    learning_type STRING NOT NULL,      -- 'success_pattern', 'failure_analysis', 'optimization'
    learning_strength FLOAT NOT NULL,   -- How strong the learning signal is
    learning_confidence FLOAT NOT NULL, -- Confidence in the learning
    
    -- Learning Content
    insights_gained ARRAY<STRING>,      -- Specific insights learned
    patterns_discovered ARRAY<STRING>,  -- Patterns identified
    principles_extracted ARRAY<STRING>, -- General principles learned
    
    -- Application
    transferability FLOAT NOT NULL,     -- How transferable the learning is
    applicable_contexts ARRAY<STRING>,  -- Where this learning applies
    limitations ARRAY<STRING>,          -- Where it doesn't apply
    
    -- Validation
    validation_method STRING,           -- How learning was validated
    validation_confidence FLOAT,        -- Confidence in validation
    counter_examples ARRAY<STRING>,     -- Cases where learning doesn't apply
    
    -- Metadata
    learned_timestamp DATETIME NOT NULL,
    learning_source STRING,             -- What generated this learning
    learning_context JSON
);

-- Performance Correlation Relationships
CREATE SCHEMA EDGE CORRELATES_WITH (
    -- Correlation Metrics
    correlation_strength FLOAT NOT NULL, -- -1.0 to 1.0
    correlation_confidence FLOAT NOT NULL, -- 0.0-1.0
    correlation_type STRING NOT NULL,    -- 'positive', 'negative', 'nonlinear'
    
    -- Statistical Information
    sample_size INT32 NOT NULL,         -- Number of observations
    p_value FLOAT,                      -- Statistical significance
    confidence_interval JSON,           -- Statistical confidence interval
    
    -- Correlation Context
    correlation_context ARRAY<STRING>,  -- Context where correlation holds
    mediating_factors ARRAY<STRING>,    -- Factors that affect correlation
    confounding_variables ARRAY<STRING>, -- Variables that might confuse correlation
    
    -- Actionability
    actionable_insight TEXT,            -- What action this correlation suggests
    recommended_interventions ARRAY<STRING>, -- How to leverage this correlation
    
    -- Metadata
    discovered_timestamp DATETIME NOT NULL,
    discovery_method STRING,            -- How correlation was discovered
    validation_status STRING           -- 'preliminary', 'validated', 'deprecated'
);

-- ==============================================================================
-- INDEXES AND OPTIMIZATIONS (Ultipa-Specific)
-- ==============================================================================

-- Composite Indexes for Complex Queries
CREATE INDEX idx_problem_domain_complexity ON ClaudetteProblem(domain, complexity_level, state_type);
CREATE INDEX idx_response_quality_backend ON ClaudetteResponse(quality_score, backend_used, generation_timestamp);
CREATE INDEX idx_strategy_performance ON SolutionStrategy(success_rate, applicable_domains, usage_frequency);
CREATE INDEX idx_session_timeline ON ProblemSession(start_timestamp, session_status, final_quality_score);

-- Full-Text Search Indexes
CREATE FULLTEXT INDEX idx_problem_description ON ClaudetteProblem(description, keywords);
CREATE FULLTEXT INDEX idx_response_content ON ClaudetteResponse(content);
CREATE FULLTEXT INDEX idx_strategy_description ON SolutionStrategy(description);
CREATE FULLTEXT INDEX idx_knowledge_content ON KnowledgeEntity(description, examples);

-- Vector Indexes for Similarity Search (Ultipa-Specific)
CREATE VECTOR INDEX idx_problem_embedding ON ClaudetteProblem(context_embedding) WITH (dimension=384, metric='cosine');
CREATE VECTOR INDEX idx_knowledge_embedding ON KnowledgeEntity(semantic_embedding) WITH (dimension=384, metric='cosine');

-- ==============================================================================
-- SCHEMA VALIDATION RULES (Ultipa-Specific)
-- ==============================================================================

-- Ensure data quality and consistency
ALTER SCHEMA NODE ClaudetteProblem ADD CONSTRAINT check_complexity_range CHECK (complexity_level >= 1 AND complexity_level <= 10);
ALTER SCHEMA NODE ClaudetteProblem ADD CONSTRAINT check_confidence_range CHECK (confidence_score >= 0.0 AND confidence_score <= 1.0);
ALTER SCHEMA NODE ClaudetteResponse ADD CONSTRAINT check_quality_scores CHECK (quality_score >= 0.0 AND quality_score <= 1.0);
ALTER SCHEMA NODE SolutionStrategy ADD CONSTRAINT check_success_rate CHECK (success_rate >= 0.0 AND success_rate <= 1.0);

-- Unique constraints
ALTER SCHEMA NODE ClaudetteProblem ADD CONSTRAINT unique_problem_hash UNIQUE (problem_hash);
ALTER SCHEMA NODE ClaudetteResponse ADD CONSTRAINT unique_response_hash UNIQUE (response_hash);
ALTER SCHEMA NODE SolutionStrategy ADD CONSTRAINT unique_strategy_id UNIQUE (strategy_id);
ALTER SCHEMA NODE ProblemSession ADD CONSTRAINT unique_session_id UNIQUE (session_id);